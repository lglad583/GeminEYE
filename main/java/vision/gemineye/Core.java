package vision.gemineye;import javafx.application.Application;import javafx.application.Platform;import javafx.stage.Stage;import org.bytedeco.javacv.FrameGrabber;import vision.gemineye.controllers.AuthController;import vision.gemineye.controllers.ErrorController;import vision.gemineye.controllers.MainController;import vision.gemineye.controllers.SplashController;import vision.gemineye.controllers.modules.FeedsController;import vision.gemineye.model.Profiles;import vision.gemineye.model.entity.Profile;import vision.gemineye.model.ui.Screen;import vision.gemineye.tasks.Startup;import java.util.Arrays;import java.util.concurrent.atomic.AtomicBoolean;import java.util.logging.Logger;import static java.util.logging.Level.SEVERE;public class Core extends Application {    public static String APP_TITLE = "FlexVision";    private static Logger logger = Logger.getLogger(Core.class.getName());    private static Screen<SplashController> splashScreen;    private static Screen<ErrorController> errorScreen;    private static Screen<MainController> mainScreen;    private static Screen<AuthController> authScreen;    private static Screen<FeedsController> feedsControllerScreen;    private static FrameGrabber frameGrabber;    private AtomicBoolean isLaunched = new AtomicBoolean(false);    private static boolean DEBUG = false;    private static boolean FEEDLESS = false;    private static boolean RECORDLESS = false;    public static Screen<FeedsController> getFeedsControllerScreen() {        return feedsControllerScreen;    }    public static FrameGrabber getFrameGrabber() {        return frameGrabber;    }    private void onLoadFinish() {        if (isLaunched.get()) {            return;        }        isLaunched.set(true);        splashScreen.hide();        feedsControllerScreen = Screen.load("modules/feeds", "feeds");        mainScreen = Screen.load(                "main",                Core.APP_TITLE + "",                1200,                690        );        mainScreen.getStage().setOnCloseRequest(event -> System.exit(-1));        authScreen = Screen.load(                "auth",                Core.APP_TITLE + " - Auth",                500,                700        );        authScreen.getController().attachMainScreen(mainScreen);        Profiles.postLoad();        if (DEBUG) {            Profile.IDENTITY = Profiles.ADMIN_PROFILE;            mainScreen.getController().auth(Profiles.ADMIN_PROFILE);            mainScreen.show();        } else {            authScreen.show();        }    }    public void start(Stage stage) throws Exception {        Screen.setErrorScreen(Screen.load(                "error",                Core.APP_TITLE + " - Error",                600,                250        ));        splashScreen = Screen.load(                "splash",                stage,                Core.APP_TITLE + "",                false,                600,                300        );        splashScreen.show();        Startup startup = new Startup(splashScreen);        startup.execute().then(postEvent -> onLoadFinish());    }    public static void main(String... args) {        logger.info("Booting " + APP_TITLE);        logger.info("Program arguments: " + Arrays.toString(args));        if (Common.isFlagged(args, "DEBUG")) {            DEBUG = true;            FeedsController.DEBUG = true;            logger.info("Enabled DEBUG");        }        if (Common.isFlagged(args, "FEEDLESS")) {            FEEDLESS = true;            logger.info("Enabled FEEDLESS");            logger.info("** This means no video processing will occur (or video recording)");        }        if (Common.isFlagged(args, "RECORDLESS")) {            RECORDLESS = true;            logger.info("Enabled RECORDLESS");            logger.info("** This means no video history will be recorded");        }        if (Common.isFlagged(args, "DEFAULT-EXPLORER")) {            MainController.DEFAULT_TAB = "explorer";            logger.info("Defaulting main to explorer tab");        }        if (Common.isFlagged(args, "DEFAULT-TARGETS")) {            MainController.DEFAULT_TAB = "targets";            logger.info("Defaulting main to targets tab");        }        if (!FEEDLESS) {            try {                FrameGrabber frameGrabber = FrameGrabber.createDefault(0);                frameGrabber.start();                Core.frameGrabber = frameGrabber;            } catch (FrameGrabber.Exception e) {                logger.log(SEVERE, "Could not set up camera feed, flagging program as FEEDLESS");                logger.log(SEVERE, Common.getStackTrace(e));                FEEDLESS = true;            }        }        Platform.setImplicitExit(true);        Application.launch(args);    }    public static boolean isDebug() {        return DEBUG;    }    public static boolean isFeedless() {        return FEEDLESS;    }    public static boolean isRecordless() {        return RECORDLESS;    }    public static Screen<MainController> getMainScreen() {        return mainScreen;    }    public static void logout() {        mainScreen.hide();        authScreen.show();        Profile.IDENTITY = null;    }}