package vision.gemineye.controllers.fragments;import com.jfoenix.controls.*;import javafx.fxml.FXML;import javafx.scene.control.DatePicker;import javafx.scene.control.Label;import javafx.scene.layout.HBox;import org.controlsfx.control.CheckComboBox;import vision.gemineye.model.Attributes;import vision.gemineye.model.Permission;import vision.gemineye.model.Profiles;import vision.gemineye.model.Roles;import vision.gemineye.model.entity.*;import vision.gemineye.model.ui.FragmentController;import vision.gemineye.model.ui.Screen;import java.time.LocalTime;import java.util.ArrayList;import java.util.Arrays;import java.util.Date;import java.util.UUID;import java.util.stream.Collectors;public class ManageUserController extends FragmentController<Profile, Profile> {    @FXML    private JFXTextField firstNameField;    @FXML    private JFXTextField midNameField;    @FXML    private JFXTextField lastNameField;    @FXML    private JFXPasswordField accessPinField;    @FXML    private DatePicker dobDatePicker;    @FXML    private JFXComboBox<Attribute> raceComboBox;    @FXML    private JFXComboBox<Role> roleComboBox;    @FXML    private JFXComboBox<Attribute> genderComboBox;    @FXML    private HBox accessPanel;    @FXML    private JFXCheckBox accessCheckbox;    @FXML    private JFXTextField accessUsernameField;    @FXML    private JFXPasswordField accessPasswordField;    @FXML    private Label errorLabel;    @FXML    private JFXTimePicker curfewComboBox;    @FXML    private CheckComboBox<Profile> conflictComboBox;    @FXML    private JFXComboBox<String> restrictionComboBox;    private Profile profile;    @Override    public void init(Screen screen) throws Exception {        roleComboBox.itemsProperty().get().addAll(Arrays.asList(Roles.getRoles()));        raceComboBox.itemsProperty().get().addAll(Attributes.getList("race"));        genderComboBox.itemsProperty().get().addAll(Attributes.getList("gender"));        restrictionComboBox.itemsProperty().get().addAll("", "Local Webcam");        accessUsernameField.visibleProperty().bind(accessCheckbox.selectedProperty());        accessPasswordField.visibleProperty().bind(accessCheckbox.selectedProperty());        accessPinField.visibleProperty().bind(accessCheckbox.selectedProperty());        roleComboBox.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, role) -> {            if (role == null) {                role = Roles.UNKNOWN;            }            accessPanel.visibleProperty().set(role.has(Permission.ACCESS));        });    }    @FXML    public void cancel() {        finish(null);    }    @Override    public void start(Profile model) {        profile = model;        conflictComboBox.getItems().clear();        conflictComboBox.getItems().addAll(                Arrays.stream(Profiles.getProfiles())                        .filter(userProfile -> model == null || !userProfile.getId().contentEquals(model.getId()))                        .collect(Collectors.toList())        );        restrictionComboBox.getSelectionModel().clearSelection();        curfewComboBox.editorProperty().get().setText("");        errorLabel.setText("");        roleComboBox.getSelectionModel().clearSelection();        raceComboBox.getSelectionModel().clearSelection();        genderComboBox.getSelectionModel().clearSelection();        firstNameField.setText("");        lastNameField.setText("");        midNameField.setText("");        accessUsernameField.setText("");        accessPasswordField.setText("");        accessPanel.visibleProperty().set(false);        accessCheckbox.selectedProperty().set(false);        if (profile != null) {            if (profile.getRole() != null)                roleComboBox.getSelectionModel().select(Roles.get(model.getRole()));            if (profile.getIdentity().getRace() != null)                raceComboBox.getSelectionModel().select(Attributes.get("race", profile.getIdentity().getRace().getId()));            if (profile.getIdentity().getGender() != null)                genderComboBox.getSelectionModel().select(Attributes.get("gender", profile.getIdentity().getGender().getId()));            firstNameField.setText(profile.getIdentity().getName().getFirst());            lastNameField.setText(profile.getIdentity().getName().getLast());            midNameField.setText(profile.getIdentity().getName().getMiddle());            if (profile.getRules() != null) {                Rules rules = profile.getRules();                if (rules.getCurfew() != null) {                    curfewComboBox.valueProperty().set(rules.getCurfew());                }                if (rules.getConflicts() != null)                    for (String id : rules.getConflicts()) {                        Profile profile = Profiles.findProfileForId(id);                        if (profile != null) {                            conflictComboBox.getCheckModel().check(profile);                        }                    }                if (rules.getRestricted() != null) {                    restrictionComboBox.getSelectionModel().select(rules.getRestricted());                }            }            if (profile.getCredentials() != null) {                accessUsernameField.setText(profile.getCredentials().getUsername());                accessPasswordField.setText(profile.getCredentials().getPassword());                if (profile.getCredentials().getPin() != null) {                    accessPasswordField.setText(profile.getCredentials().getPin());                }            }            accessCheckbox.selectedProperty().set(profile.has(Permission.ACCESS));        }    }    @FXML    public void saveUser() {        String id = null;        if (profile != null) {            id = profile.getId();        } else {            id = UUID.randomUUID().toString();        }        errorLabel.setText("");        Name name = new Name(                firstNameField.getText().trim(),                midNameField.getText().trim(),                lastNameField.getText().trim()        );        if (name.isInvalid()) {            errorLabel.setText("Please provide a first and last name.");            return;        }        Date date = null;        String dateText = dobDatePicker.getEditor().getText();        if (!dateText.isEmpty()) {            try {                date = new Date(dobDatePicker.getEditor().getText());            } catch (Exception e) {                //ignore            }        }        Attribute race = raceComboBox.getSelectionModel().selectedItemProperty().get();        if (race == null) {            race = Attributes.getDefault("race");        }        Attribute gender = genderComboBox.getSelectionModel().selectedItemProperty().get();        if (gender == null) {            gender = Attributes.getDefault("gender");        }        Identity identity = new Identity(                name,                date,                gender,                race        );        Role role = roleComboBox.getValue();        if (role == null) {            role = Roles.UNKNOWN;        }        if (!accessCheckbox.selectedProperty().get()) {           role.getPermissions().remove(Permission.ACCESS);        } else {            role.getPermissions().add(Permission.ACCESS);        }        Credentials credentials = null;        if (accessCheckbox.selectedProperty().get()) {            String username = accessUsernameField.getText().trim().toLowerCase();            String password = accessPasswordField.getText().trim();            String pin = accessPinField.getText().trim();            if (username.isEmpty() || password.isEmpty()) {                errorLabel.setText("Please complete user access credentials.");                return;            }            Profile profile = Profiles.findByUsername(username);            if (profile != null) {                errorLabel.setText("This username is already in use.");                return;            }            if (pin.isEmpty()) {                pin = null;            } else {                if (pin.length() < 4 || pin.length() > 4) {                    errorLabel.setText("The access pin must be 4 digits long.");                    return;                }                boolean isNumeric = true;                for (int i = 0; i < pin.length(); i++) {                    String character = "" + pin.charAt(i);                    try {                        Integer.parseInt(character);                    } catch (Exception e) {                        isNumeric = false;                        break;                    }                }                if (!isNumeric) {                    errorLabel.setText("The access pin must only contain digits e.g. 1234.");                    return;                }            }            credentials = new Credentials(username, password, pin);        }        Model model = new Model(new ArrayList<>());        Model galleryModel = new Model(new ArrayList<>());        String[] conflicted = null;        LocalTime curfew = curfewComboBox.valueProperty().get();        String restricted = restrictionComboBox.getSelectionModel().getSelectedItem();        if (!conflictComboBox.getCheckModel().isEmpty()) {            conflicted = conflictComboBox.checkModelProperty()                    .get()                    .getCheckedItems()                    .stream()                    .map(Profile::getId)                    .collect(Collectors.toList())                    .toArray(new String[0]);        }        Rules rules = new Rules(restricted, curfew, conflicted);        if (profile == null) {            profile = new Profile(                    id,                    identity,                    model,                    galleryModel,                    credentials,                    role,                    rules            );        } else {            profile.getIdentity().setDob(identity.getDob());            profile.getIdentity().setGender(identity.getGender());            profile.getIdentity().setName(identity.getName());            profile.getIdentity().setRace(identity.getRace());            profile.setCredentials(credentials);            profile.setRole(role);            profile.setRules(rules);        }        profile.setUnknown(true);        finish(                profile        );    }}