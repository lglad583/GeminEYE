package vision.gemineye.controllers;import com.jfoenix.controls.JFXButton;import javafx.application.Platform;import javafx.fxml.FXML;import javafx.scene.control.Label;import javafx.scene.control.TabPane;import javafx.scene.image.Image;import javafx.scene.image.ImageView;import javafx.scene.layout.*;import vision.gemineye.Common;import vision.gemineye.Core;import vision.gemineye.controllers.modules.ExplorerController;import vision.gemineye.controllers.modules.FeedsController;import vision.gemineye.controllers.modules.TargetsController;import vision.gemineye.model.Profiles;import vision.gemineye.model.Snapshot;import vision.gemineye.model.entity.Rules;import vision.gemineye.model.ui.Screen;import vision.gemineye.model.ui.ScreenController;import vision.gemineye.model.Permission;import vision.gemineye.model.entity.Profile;import vision.gemineye.model.ui.TabContainer;import java.time.LocalTime;import java.util.ArrayList;import java.util.Arrays;import java.util.List;public class MainController implements ScreenController {    @FXML    private JFXButton usernameLabel;    @FXML    private TabPane moduleTabPane;    @FXML    private ImageView profileImageView;    @FXML    private JFXButton logoutButton;    @FXML    private JFXButton settingsButton;    private TabContainer tabs;    public static String DEFAULT_TAB = "feeds";    @FXML    private void onSettingsClicked() {    }    @FXML    private void onLogoutClicked() {        Core.logout();    }    @Override    public void init(Screen screen) throws Exception {        tabs = new TabContainer(moduleTabPane, "modules/");        tabs.init();//        ((ImageView) logoutButton.getGraphic()).setImage(new Image(Screen.getPNGAssetStream("logout")));//        ((ImageView) settingsButton.getGraphic()).setImage(new Image(Screen.getPNGAssetStream("settings")));        tabs.add("Feeds", Core.getFeedsControllerScreen(), profile -> profile.has(Permission.ACCESS_FEEDS));        tabs.add("Explorer", "explorer", profile -> profile.has(Permission.ACCESS_EXPLORER));        tabs.add("Targets", "targets", profile -> profile.has(Permission.ACCESS_TARGETS));        tabs.attach(null);        Screen<ExplorerController> explorer = tabs.getTab("explorer");        Screen<FeedsController> feeds = tabs.getTab("feeds");        feeds.getController().attachMainController(screen);        explorer.getController().attachFeedsController(feeds);        explorer.getController().attachMainController(this);        moduleTabPane.getSelectionModel().select(tabs.getTabIndex(DEFAULT_TAB));    }    public void auth(Profile profile) {        tabs.attach(profile);        resetProfile();        moduleTabPane.getSelectionModel().select(tabs.getTabIndex(DEFAULT_TAB));    }    public void setStatusForProfile(Profile profile) {        Platform.runLater(() -> {            String update = "Face is not in system!";            if (profile != null) {                update = "Hello, " + profile.getIdentity().getName().getFirst() + "!";            }        });    }    public void resetProfile() {        String usernameLabelText = "";        Image profileImage = Common.PROFILE;        if (Profile.IDENTITY != null) {            usernameLabelText = Profile.IDENTITY.getTitle();            profileImage = Profile.IDENTITY.getProfileImage();        }        profileImageView.setImage(profileImage);        usernameLabel.setText(usernameLabelText);    }    public void reloadProfileList() {        Screen<ExplorerController> explorerControler = tabs.getTab("explorer");        explorerControler.getController().setProfiles(Profiles.getProfiles());    }    public void broadcast(Snapshot snapshot) {        Screen<FeedsController> feedsScreen = tabs.getTab("feeds");        feedsScreen.getController().setProfilesFeed(snapshot.getUsers());        Screen<TargetsController> targetsScreen = tabs.getTab("targets");        List<String> restricted = new ArrayList<>();        List<String> conflicted = new ArrayList<>();        List<String> curfews = new ArrayList<>();        for (String id : snapshot.getUsers()) {            Profile profile = Profiles.findProfileForId(id);            if (profile == null || profile.getRules() == null) {                continue;            }            Rules rules = profile.getRules();            if (rules.getConflicts() != null) {                List<String> banned = Arrays.asList(rules.getConflicts());                for (String otherPerson : banned) {                    if (snapshot.getUsers().contains(otherPerson)) {                        //Failed test, both users get flagged                        //Duplicates are okay because method converts list to Set                        conflicted.add(otherPerson);                        conflicted.add(id);                    }                }            }            if (rules.getCurfew() != null) {                if (rules.getCurfew().isBefore(LocalTime.now())) {                    curfews.add(id);                }            }            if (rules.getRestricted() != null) {                if (rules.getRestricted().equalsIgnoreCase(snapshot.getFeed())) {                    restricted.add(id);                }            }        }        targetsScreen.getController().updateTargets(                restricted,                conflicted,                curfews        );    }    public void updateProfileImage(Profile profile) {        //TODO    }    public void updateProfileGallery(Profile profile) {        //TODO    }}